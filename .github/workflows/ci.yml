name: XSigma CI - Multi-Backend Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  BUILD_TYPE: Release

jobs:
  # Matrix build testing all three logging backends across multiple platforms
  build-and-test:
    name: ${{ matrix.os }} - ${{ matrix.logging_backend }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        logging_backend: [NATIVE, LOGURU, GLOG]
        include:
          # Ubuntu-specific configuration
          - os: ubuntu-latest
            compiler_c: clang
            compiler_cxx: clang++
            generator: Ninja
            
          # Windows-specific configuration
          - os: windows-latest
            compiler_c: clang
            compiler_cxx: clang++
            generator: Ninja
            
          # macOS-specific configuration
          - os: macos-latest
            compiler_c: clang
            compiler_cxx: clang++
            generator: Ninja

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive
        fetch-depth: 0

    - name: Install dependencies (Ubuntu)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          ninja-build \
          clang \
          llvm \
          cmake \
          python3 \
          python3-pip

    - name: Install dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install ninja llvm cmake python3

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install ninja llvm cmake python3 -y

    - name: Setup Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Configure CMake (Ubuntu/macOS)
      if: runner.os != 'Windows'
      run: |
        cmake -B build \
          -S . \
          -G "${{ matrix.generator }}" \
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} \
          -DCMAKE_C_COMPILER=${{ matrix.compiler_c }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler_cxx }} \
          -DXSIGMA_LOGGING_BACKEND=${{ matrix.logging_backend }} \
          -DXSIGMA_BUILD_TESTING=ON \
          -DXSIGMA_ENABLE_GTEST=ON \
          -DXSIGMA_ENABLE_BENCHMARK=ON \
          -DXSIGMA_ENABLE_LTO=OFF

    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        cmake -B build `
          -S . `
          -G "${{ matrix.generator }}" `
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }} `
          -DCMAKE_C_COMPILER=${{ matrix.compiler_c }} `
          -DCMAKE_CXX_COMPILER=${{ matrix.compiler_cxx }} `
          -DXSIGMA_LOGGING_BACKEND=${{ matrix.logging_backend }} `
          -DXSIGMA_BUILD_TESTING=ON `
          -DXSIGMA_ENABLE_GTEST=ON `
          -DXSIGMA_ENABLE_BENCHMARK=ON `
          -DXSIGMA_ENABLE_LTO=OFF

    - name: Build
      run: cmake --build build --config ${{ env.BUILD_TYPE }} -j 2

    - name: Run Tests
      working-directory: ${{ github.workspace }}/build
      run: ctest --output-on-failure --build-config ${{ env.BUILD_TYPE }}

    - name: Upload test results
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.logging_backend }}
        path: |
          build/Testing/Temporary/LastTest.log
          build/**/*.log

  # Quick validation build (default backend only)
  quick-build:
    name: Quick Build - Default Backend
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build clang cmake python3

    - name: Configure and Build
      run: |
        cd Scripts
        python3 setup.py config.ninja.clang.python.build.test

    - name: Run Tests
      run: |
        cd build_ninja
        ctest --output-on-failure

  # Code quality checks
  code-quality:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          ninja-build \
          clang \
          clang-tidy \
          cppcheck \
          cmake

    - name: Configure with static analysis
      run: |
        cmake -B build \
          -S . \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          -DXSIGMA_LOGGING_BACKEND=LOGURU \
          -DXSIGMA_ENABLE_CPPCHECK=ON \
          -DXSIGMA_BUILD_TESTING=ON

    - name: Build with analysis
      run: cmake --build build -j 2

    - name: Upload analysis results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: code-quality-results
        path: |
          build/cppcheckoutput.log
          build/**/*.log

  # Sanitizer builds (AddressSanitizer)
  sanitizer-build:
    name: Sanitizer - ${{ matrix.sanitizer }}
    runs-on: ubuntu-latest
    
    strategy:
      fail-fast: false
      matrix:
        sanitizer: [address, undefined]
        logging_backend: [LOGURU]  # Test with default backend only
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ninja-build clang cmake python3

    - name: Configure with sanitizer
      run: |
        cmake -B build \
          -S . \
          -G Ninja \
          -DCMAKE_BUILD_TYPE=Debug \
          -DCMAKE_C_COMPILER=clang \
          -DCMAKE_CXX_COMPILER=clang++ \
          -DXSIGMA_LOGGING_BACKEND=${{ matrix.logging_backend }} \
          -DXSIGMA_ENABLE_SANITIZER=ON \
          -DXSIGMA_SANITIZER_TYPE=${{ matrix.sanitizer }} \
          -DXSIGMA_BUILD_TESTING=ON \
          -DXSIGMA_ENABLE_GTEST=ON

    - name: Build
      run: cmake --build build -j 2

    - name: Run Tests with Sanitizer
      working-directory: ${{ github.workspace }}/build
      run: ctest --output-on-failure
      env:
        ASAN_OPTIONS: detect_leaks=1:abort_on_error=1
        UBSAN_OPTIONS: print_stacktrace=1:halt_on_error=1

  # Summary job that requires all matrix builds to pass
  ci-success:
    name: CI Success
    needs: [build-and-test, quick-build, code-quality, sanitizer-build]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Check build matrix results
      run: |
        if [ "${{ needs.build-and-test.result }}" != "success" ]; then
          echo "Build and test matrix failed"
          exit 1
        fi
        if [ "${{ needs.quick-build.result }}" != "success" ]; then
          echo "Quick build failed"
          exit 1
        fi
        if [ "${{ needs.code-quality.result }}" != "success" ]; then
          echo "Code quality checks failed"
          exit 1
        fi
        if [ "${{ needs.sanitizer-build.result }}" != "success" ]; then
          echo "Sanitizer builds failed"
          exit 1
        fi
        echo "All CI checks passed successfully!"

