# Prints accumulated Caffe2 configuration summary
function(print_configuration_summary)
  message("")
  message("******** Summary ********")
  message("General:")
  message("  System                : ${CMAKE_SYSTEM_NAME}")
  message("  CMake version         : ${CMAKE_VERSION}")
  message("  CMake command         : ${CMAKE_COMMAND}")
  message("  Build type            : ${CMAKE_BUILD_TYPE}")
  message("  C++:")
  message("    compiler            : ${CMAKE_CXX_COMPILER}")
  message("    compiler id         : ${CMAKE_CXX_COMPILER_ID}")
  message("    compiler version    : ${CMAKE_CXX_COMPILER_VERSION}")
  message("    C flags             : ${CMAKE_C_FLAGS}")
  message("    CXX flags           : ${CMAKE_CXX_FLAGS}")
  message("    CXX STD             : ${XSIGMA_CXX_STANDARD}")
  message("    Linker flags        : ${CMAKE_EXE_LINKER_FLAGS}")
  message("    Shared flags        : ${CMAKE_SHARED_LINKER_FLAGS}")
  message("    Module flags        : ${CMAKE_MODULE_LINKER_FLAGS}")
  message("    Compile definitions : ${tmp}")
  if(XSIGMA_ENABLE_IWYU)
    message("  IWYU:")
    message("    IWYU executable     : ${XSIGMA_IWYU_EXECUTABLE}")
    message("    IWYU arguments      : ${XSIGMA_IWYU_ARGS}")
  endif()
  get_directory_property(tmp DIRECTORY ${PROJECT_SOURCE_DIR}
                                       COMPILE_DEFINITIONS)

  message("  CMAKE_PREFIX_PATH     : ${CMAKE_PREFIX_PATH}")
  message("  CMAKE_INSTALL_PREFIX  : ${CMAKE_INSTALL_PREFIX}")
  message("  XSIGMA_VERSION        : ${XSIGMA_VERSION}")
  message("  BUILD_BINARY          : ${XSIGMA_BINARY_DIR}")
  message("  XSIGMA_DLL_PATHS      : ${XSIGMA_DLL_PATHS}")
  message("  DATA_STORE            : ${XSIGMA_DATA_STORE}")
  message("  XSIGMA_flags:")
  message("    Vectorization       : ${XSIGMA_VECTORIZATION_TYPE}")
  if(XSIGMA_ENABLE_TBB)
    set(_xsigma_smp_backend "TBB")
  else()
    set(_xsigma_smp_backend "STDThread")
  endif()
  message("    SMP implementation  : ${_xsigma_smp_backend}")
  message("    MKL                 : ${XSIGMA_ENABLE_MKL}")
  message("    Memkind             : ${XSIGMA_ENABLE_MEMKIND}")
  message("    NUMA                : ${XSIGMA_ENABLE_NUMA}")
  message("    Documentation       : ${XSIGMA_BUILD_DOCUMENTATION}")
  message("    External libraries  : ${XSIGMA_ENABLE_EXTERNAL}")

  message("  Build:")
  message("    Compile tools only  : ${XSIGMA_BUILD_COMPILE_TOOLS_ONLY}")
  message("    Shared libs         : ${XSIGMA_BUILD_SHARED_LIBS}")
  message("    Parallel            : ${XSIGMA_PARALLEL_PROJECTS_BUILD}")
  if(XSIGMA_WRAP_PYTHON OR XSIGMA_BUILD_WHEEL)
    message("  Python:")
    message("    Build wheel         : ${XSIGMA_BUILD_WHEEL}")
    message("    Python version      : ${XSIGMA_PYTHON_VERSION}")
    message("    Python executable   : ${Python3_EXECUTABLE}")
    message("    Python site-packages: ${XSIGMA_PYTHON_SITE_PACKAGES_SUFFIX}")
  else()
    message("  PYTHON                : OFF")
  endif()
  if(XSIGMA_WRAP_JAVA)
    message("  Java:")
    message("    Java version        : ${Java_VERSION_MAJOR}")
    message("    Java executable     : ${Java_JAR_EXECUTABLE}")
    message("    JNI library         : ${XSIGMA_JNI_LIBRARIES}")
    message("    JNI includes        : ${XSIGMA_JNI_INCLUDE_DIRS}")
  else()
    message("  JAVA                  : OFF")
  endif()
  if(XSIGMA_ENABLE_CUDA)
    message("  CUDA:")
    message("    CUDA include path   : ${CUDA_INCLUDE_DIRS}")
    message("    NVCC executable     : ${CUDA_NVCC_EXECUTABLE}")
    message("    NVCC flags          : ${CMAKE_CUDA_FLAGS}")
    message("    CUDA host compiler  : ${CUDA_HOST_COMPILER}")
    message("    NVCC --device-c     : ${CUDA_SEPARABLE_COMPILATION}")
    message("    CUDA version        : ${CUDA_VERSION}")
    message("    CUDA library        : ${XSIGMA_CUDA_LIBRARIES}")
    message("    CUDA compiler       : ${CMAKE_CUDA_COMPILER}")
    message(
      "    CUDA includes       : ${CMAKE_CUDA_TOOLKIT_INCLUDE_DIRECTORIES}")
  else()
    message("  CUDA                  : OFF")
  endif()
  if(XSIGMA_BUILD_TESTING)
    message("  Testing:")
    message("    Valgrind            : ${XSIGMA_ENABLE_VALGRIND}")
    message("    Coverage            : ${XSIGMA_ENABLE_COVERAGE}")
    message("    Benchmark           : ${XSIGMA_ENABLE_BENCHMARK}")
    message("    Google test         : ${XSIGMA_ENABLE_GTEST}")
    if(XSIGMA_ENABLE_SANITIZER)
      message("    Sanitizer           : ${XSIGMA_SANITIZER_TYPE}")
    endif()
  endif()

  message("")
endfunction()
