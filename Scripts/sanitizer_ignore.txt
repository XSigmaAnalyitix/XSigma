# =============================================================================
# XSigma Sanitizer Ignore File
# =============================================================================
# This file specifies patterns to exclude from sanitizer checks
# 
# Format: [sanitizer_type:]pattern
# 
# Sanitizer types:
#   - src: Source file patterns (default if no prefix specified)
#   - fun: Function name patterns
#   - type: Type name patterns
#
# Pattern syntax:
#   - Use * for wildcards
#   - Use ** for recursive directory matching
#   - Patterns are matched against full paths
#
# Examples:
#   src:*/ThirdParty/*           - Ignore all files in ThirdParty directories
#   fun:*test*                   - Ignore all functions with 'test' in the name
#   type:std::*                  - Ignore all std:: types
# =============================================================================

# =============================================================================
# Third-Party Library Exclusions
# =============================================================================

# Exclude all third-party libraries from sanitizer checks
src:*/ThirdParty/*
src:*/third_party/*
src:*/3rdparty/*
src:*/external/*

# Specific third-party libraries used in XSigma
src:*/fmt/*
src:*/cpuinfo/*
src:*/loguru/*
src:*/mimalloc/*
src:*/googletest/*
src:*/benchmark/*
src:*/magic_enum/*
src:*/tbb/*

# System and compiler headers
src:/usr/include/*
src:/usr/local/include/*
src:*/include/c++/*
src:*/Microsoft Visual Studio/*
src:*/Windows Kits/*
src:*/Program Files/*

# =============================================================================
# Test and Example Code Exclusions
# =============================================================================

# Test files (may contain intentional issues for testing)
src:*/test/*
src:*/tests/*
src:*/Testing/*
src:*/*test*.cpp
src:*/*test*.cxx
src:*/*test*.cc
src:*/*Test*.cpp
src:*/*Test*.cxx
src:*/*Test*.cc

# Example and demo code
src:*/examples/*
src:*/demo/*
src:*/samples/*
src:*/tutorial/*

# =============================================================================
# Build System Generated Files
# =============================================================================

# CMake generated files
src:*/CMakeFiles/*
src:*/cmake_install.cmake
src:*/CTestTestfile.cmake

# Build directories
src:*/build/*
src:*/Build/*
src:*/_build/*
src:*/out/*
src:*/Debug/*
src:*/Release/*
src:*/RelWithDebInfo/*
src:*/MinSizeRel/*

# =============================================================================
# Function-Level Exclusions
# =============================================================================

# Standard library functions that may have known issues
fun:std::__throw_*
fun:std::terminate*
fun:std::_Throw_*
fun:std::__cxa_*

# Compiler intrinsics and built-ins
fun:__builtin_*
fun:_mm_*
fun:_mm256_*
fun:_mm512_*

# MSVC specific functions
fun:__security_*
fun:__report_*
fun:_CRT_*

# Memory allocation functions (uncomment if using custom allocators)
# fun:malloc
# fun:free
# fun:realloc
# fun:calloc
# fun:operator new
# fun:operator delete

# =============================================================================
# Type-Level Exclusions
# =============================================================================

# Standard library types with known sanitizer issues
type:std::basic_string*
type:std::vector*
type:std::shared_ptr*
type:std::unique_ptr*
type:std::function*
type:std::thread*
type:std::mutex*
type:std::condition_variable*

# =============================================================================
# XSigma Project-Specific Exclusions
# =============================================================================

# Legacy code that may have known issues
# Uncomment and modify as needed:
# src:*/Library/Legacy/*
# fun:legacy_*
# type:LegacyClass*

# Performance-critical code that should not be instrumented
# Uncomment and modify as needed:
# src:*/Library/Core/performance/*
# src:*/Library/Core/simd/*
# fun:*_simd_*
# fun:*_vectorized_*

# Platform-specific code with known issues
# Uncomment and modify as needed:
# src:*/platform/windows/*
# src:*/platform/linux/*
# src:*/platform/macos/*

# =============================================================================
# Sanitizer-Specific Exclusions
# =============================================================================

# AddressSanitizer specific exclusions
# Uncomment if you have known AddressSanitizer false positives:
# src:*/known_asan_issues.cpp

# ThreadSanitizer specific exclusions
# Uncomment if you have lock-free algorithms or known race conditions:
# src:*/lockfree/*
# fun:*atomic*
# fun:*lockfree*

# UndefinedBehaviorSanitizer specific exclusions
# Uncomment if you have intentional undefined behavior for testing:
# src:*/intentional_overflow.cpp
# fun:*overflow_test*

# RenderRegion function in BFC allocator performs pointer arithmetic
# for memory visualization that may trigger UBSan warnings
fun:*RenderRegion*

# MemorySanitizer specific exclusions
# Uncomment if you have code that intentionally uses uninitialized memory:
# src:*/uninitialized_memory_test.cpp

# LeakSanitizer specific exclusions
# Uncomment if you have intentional memory leaks for testing:
# src:*/intentional_leak_test.cpp
# fun:*leak_test*

# =============================================================================
# Temporary Exclusions (Development Only)
# =============================================================================

# Use this section for temporary exclusions during development
# Remember to remove these before production builds
# Example:
# src:*/work_in_progress.cpp
# fun:experimental_*
# type:ExperimentalClass*

# =============================================================================
# Notes
# =============================================================================
# 
# 1. This file is used by Clang sanitizers when the -fsanitize-ignorelist flag is used
# 2. Patterns are case-sensitive
# 3. Use forward slashes (/) for path separators, even on Windows
# 4. Test your patterns carefully - overly broad patterns may hide real issues
# 5. Consider using sanitizer-specific exclusions rather than blanket exclusions
# 6. Regularly review and clean up this file to ensure it stays current
#
