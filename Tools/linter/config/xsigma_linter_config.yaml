# XSigma Linter Configuration
# ============================
# This configuration file centralizes hardcoded paths and settings used by various
# linters in the XSigma project. This allows for easier maintenance and cross-platform
# compatibility by avoiding hardcoded paths scattered throughout the codebase.
#
# Organization: XSigmaAnalyitix
# Project: XSigma
# Last Updated: 2025-10-27

# Header-Only APIs Configuration
# ==============================
# Defines the location of header-only API definitions and test globs
header_only:
  # Path to the file containing header-only API symbols (relative to repository root)
  apis_file: "Library/Core/header_only_apis.txt"
  
  # Glob patterns for C++ test files that verify header-only APIs
  # These tests must be built without linking against the main library
  test_globs:
    - "Library/Core/test/cpp/aoti_abi_check/*.cpp"
    - "Tests/**/header_only_test.cpp"

# Dynamo Registry Configuration
# =============================
# Defines paths for PyTorch-compatible dynamo/graph break registry
dynamo:
  # Path to the graph break registry JSON file (relative to repository root)
  graph_break_registry: "Library/Core/_dynamo/graph_break_registry.json"
  
  # Default dynamo directory for registry lookups
  default_dynamo_dir: "Library/Core/_dynamo"

# OrderedSet Import Configuration
# ===============================
# Defines the import statement for OrderedSet used by set_linter
ordered_set:
  # Import statement to use when replacing Python's built-in set
  import_statement: "from xsigma.utils._ordered_set import OrderedSet\n\n"
  
  # Error message when built-in set is detected
  error_message: "Builtin `set` is deprecated"

# PyBind11 Include Configuration
# ==============================
# Defines paths for PyBind11 includes and specializations
pybind11:
  # Path to the standard PyBind11 utilities header
  utils_header: "Library/Core/csrc/utils/pybind.h"
  
  # Path where PyBind11 specializations should be placed
  specialization_header: "Library/Core/csrc/utils/pybind.h"

# Meta Registration Configuration
# ===============================
# Defines paths for meta registrations and fake implementations
meta:
  # Path to fake implementations for meta registrations
  fake_impls: "Library/Core/_subclasses/fake_impls.py"
  
  # Path to meta registrations (should not use create_unbacked)
  meta_registrations: "Library/Core/_meta_registrations.py"

# Linter Include/Exclude Patterns
# ===============================
# Defines include and exclude patterns for various linters
patterns:
  # Patterns for context decorator linter (checks for proper decorators)
  context_decorator:
    include:
      - "Library/**"
    exclude:
      - "ThirdParty/**"
      - "Tools/**"
      - ".vscode/**"
      - ".git/**"
      - ".augment/**"

# Deploy Detection Configuration
# ==============================
# Defines patterns for detecting deploy/multipy runners
deploy:
  # Pattern to detect torch_deploy (deprecated)
  deprecated_pattern: "sys.executable == 'torch_deploy'"
  
  # Recommended replacement function
  replacement_function: "xsigma._running_with_deploy()"

# Test Device Bias Configuration
# ==============================
# Defines patterns for detecting device-biased test code
test_device:
  # Pattern to detect CUDA device specification
  cuda_pattern: "torch.device('cuda')"
  
  # Recommended replacement
  replacement_pattern: "torch.device(GPU_TYPE)"

# Import Allowlist Configuration
# ==============================
# Defines third-party modules that are allowed to be imported
# This list should be carefully maintained to prevent unwanted dependencies
import_allowlist:
  - "sympy"
  - "einops"
  - "libfb"
  - "torch"
  - "tvm"
  - "_pytest"
  - "tabulate"
  - "optree"
  - "typing_extensions"
  - "triton"
  - "functorch"
  - "torchrec"
  - "numpy"
  - "torch_xla"
  - "colorama"
  - "psutil"
  - "helpers"
  - "run_coverage"

# Test Owners Configuration
# =========================
# Defines acceptable owner labels for test files
test_owners:
  # URL to fetch XSigma labels from (for validation)
  labels_url: "https://api.github.com/repos/XSigmaAnalyitix/XSigma/labels"
  
  # Acceptable owner label prefixes
  acceptable_prefixes:
    - "module:"
    - "oncall:"
  
  # Acceptable owner labels that don't follow the prefix convention
  acceptable_exceptions:
    - "NNC"
    - "high priority"
  
  # Glob patterns for files exempt from ownership requirements
  glob_exceptions:
    - "**/test/run_test.py"

# Copyright Configuration
# ======================
# Defines patterns for detecting proprietary/confidential code
copyright:
  # Pattern to detect proprietary code
  proprietary_pattern: "Confidential and proprietary"
  
  # Error message for proprietary code
  error_message: "Proprietary and confidential source code should not be contributed to XSigma codebase"

# Dependency Configuration
# =======================
# Defines external tool versions and dependencies
dependencies:
  # Torchfix version (Python linting tool)
  torchfix_version: "0.4.0"
  
  # Python version constraints for torchfix
  torchfix_python_constraint: 'python_version >= "3.10" and python_version < "3.13"'

