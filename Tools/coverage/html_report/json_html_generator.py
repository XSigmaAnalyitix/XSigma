"""HTML coverage report generator from JSON coverage data.

This module provides functionality to convert JSON coverage reports
(generated by json_report_generator.py) into human-readable HTML reports.
Useful for CI/CD pipelines that need to generate reports from JSON data.
"""

import json
from pathlib import Path
from typing import Dict, Optional

from .templates import COMMON_CSS


class JsonHtmlGenerator:
    """Generates HTML coverage reports from JSON coverage data.

    This class creates professional HTML reports from JSON coverage data,
    including summary metrics and per-file coverage details.
    """

    def __init__(self, output_dir: Path):
        """Initialize the HTML generator.

        Args:
            output_dir: Directory where HTML reports will be generated.
        """
        self.output_dir = Path(output_dir)
        self.output_dir.mkdir(parents=True, exist_ok=True)

    def generate_from_json(self, json_file: Path) -> Path:
        """Generate HTML report from JSON coverage file.

        Args:
            json_file: Path to the JSON coverage report file.

        Returns:
            Path to the generated index.html file.

        Raises:
            FileNotFoundError: If the JSON file does not exist.
            ValueError: If the JSON file is invalid.
        """
        with open(json_file, 'r', encoding='utf-8') as f:
            data = json.load(f)

        return self.generate_from_dict(data)

    def generate_from_dict(self, data: dict) -> Path:
        """Generate HTML report from JSON data dictionary.

        Args:
            data: Dictionary containing coverage data.

        Returns:
            Path to the generated index.html file.
        """
        # Generate index page
        index_html = self._generate_index(data)
        index_file = self.output_dir / "index.html"
        with open(index_file, 'w', encoding='utf-8') as f:
            f.write(index_html)

        # Generate per-file pages
        if "files" in data:
            for file_info in data["files"]:
                file_html = self._generate_file_page(file_info)
                file_name = Path(file_info.get("file", "unknown")).name
                file_path = self.output_dir / f"{file_name}.html"
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(file_html)

        print(f"HTML report generated at: {index_file}")
        return index_file

    def _generate_index(self, data: dict) -> str:
        """Generate the index/summary HTML page.

        Args:
            data: Dictionary containing coverage data.

        Returns:
            HTML content for the index page.
        """
        summary = data.get("summary", {})
        line_cov = summary.get("line_coverage", {})
        func_cov = summary.get("function_coverage", {})
        region_cov = summary.get("region_coverage", {})

        line_percent = line_cov.get("percent", 0.0)
        func_percent = func_cov.get("percent", 0.0)
        region_percent = region_cov.get("percent", 0.0)

        files = data.get("files", [])
        files_count = len(files)

        html = f"""<!DOCTYPE html>
<html>
<head>
    <title>Code Coverage Report</title>
    <style>
        {COMMON_CSS}
    </style>
</head>
<body>
    <div class="container">
        <h1>Code Coverage Report</h1>

        <div class="summary">
            <div class="metric">
                <div class="metric-label">Line Coverage</div>
                <div class="metric-value">{line_percent:.1f}%</div>
                <div class="coverage-bar">
                    <div class="coverage-fill" style="width: {line_percent}%;"></div>
                </div>
            </div>
            <div class="metric">
                <div class="metric-label">Function Coverage</div>
                <div class="metric-value">{func_percent:.1f}%</div>
                <div class="coverage-bar">
                    <div class="coverage-fill" style="width: {func_percent}%;"></div>
                </div>
            </div>
            <div class="metric">
                <div class="metric-label">Region Coverage</div>
                <div class="metric-value">{region_percent:.1f}%</div>
                <div class="coverage-bar">
                    <div class="coverage-fill" style="width: {region_percent}%;"></div>
                </div>
            </div>
            <div class="metric">
                <div class="metric-label">Files Analyzed</div>
                <div class="metric-value">{files_count}</div>
            </div>
        </div>

        <h2>Coverage Details</h2>
        <table>
            <tr>
                <th>File</th>
                <th>Line Coverage</th>
                <th>Function Coverage</th>
                <th>Region Coverage</th>
            </tr>
"""

        # Sort files by line coverage percentage in descending order (highest first)
        sorted_files = sorted(files,
                             key=lambda f: f.get("line_coverage", {}).get("percent", 0.0),
                             reverse=True)

        for file_info in sorted_files:
            file_name = file_info.get("file", "unknown")
            line_cov_file = file_info.get("line_coverage", {})
            func_cov_file = file_info.get("function_coverage", {})
            region_cov_file = file_info.get("region_coverage", {})

            line_percent_file = line_cov_file.get("percent", 0.0)
            func_percent_file = func_cov_file.get("percent", 0.0)
            region_percent_file = region_cov_file.get("percent", 0.0)

            file_link = f"{Path(file_name).name}.html"

            html += f"""            <tr>
                <td><a href="{file_link}">{file_name}</a></td>
                <td>{line_percent_file:.1f}%</td>
                <td>{func_percent_file:.1f}%</td>
                <td>{region_percent_file:.1f}%</td>
            </tr>
"""

        html += """        </table>

        <div class="metadata">
            <p>Generated by XSigma Coverage Tool</p>
        </div>
    </div>
</body>
</html>
"""
        return html

    def _generate_file_page(self, file_info: dict) -> str:
        """Generate a per-file coverage report page.

        Args:
            file_info: Dictionary containing file coverage information.

        Returns:
            HTML content for the file page.
        """
        file_name = file_info.get("file", "unknown")
        line_cov = file_info.get("line_coverage", {})
        func_cov = file_info.get("function_coverage", {})
        region_cov = file_info.get("region_coverage", {})

        line_percent = line_cov.get("percent", 0.0)
        func_percent = func_cov.get("percent", 0.0)
        region_percent = region_cov.get("percent", 0.0)

        html = f"""<!DOCTYPE html>
<html>
<head>
    <title>Coverage: {file_name}</title>
    <style>
        body {{ font-family: Arial, sans-serif; margin: 0; background-color: #f5f5f5; }}
        .container {{ max-width: 1200px; margin: 0 auto; background-color: white; }}
        .header {{ background-color: #007bff; color: white; padding: 20px; }}
        .header h1 {{ margin: 0; font-size: 24px; }}
        .header p {{ margin: 5px 0 0 0; font-size: 14px; }}
        .stats {{ display: grid; grid-template-columns: repeat(3, 1fr); gap: 10px; padding: 20px; background-color: #f8f9fa; }}
        .stat {{ padding: 10px; background-color: white; border-radius: 5px; border-left: 4px solid #007bff; }}
        .stat-label {{ font-size: 12px; color: #666; }}
        .stat-value {{ font-size: 18px; font-weight: bold; }}
        .details {{ padding: 20px; }}
        .detail-row {{ padding: 10px; border-bottom: 1px solid #eee; }}
        .detail-label {{ font-weight: bold; color: #333; }}
        .detail-value {{ color: #666; margin-left: 20px; }}
        .back-link {{ padding: 20px; }}
        .back-link a {{ color: #007bff; text-decoration: none; }}
        .back-link a:hover {{ text-decoration: underline; }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>Coverage Report: {file_name}</h1>
            <p>File coverage analysis</p>
        </div>
        
        <div class="stats">
            <div class="stat">
                <div class="stat-label">Line Coverage</div>
                <div class="stat-value">{line_percent:.1f}%</div>
            </div>
            <div class="stat">
                <div class="stat-label">Function Coverage</div>
                <div class="stat-value">{func_percent:.1f}%</div>
            </div>
            <div class="stat">
                <div class="stat-label">Region Coverage</div>
                <div class="stat-value">{region_percent:.1f}%</div>
            </div>
        </div>

        <div class="details">
            <div class="detail-row">
                <div class="detail-label">Line Coverage Details:</div>
                <div class="detail-value">
                    Total: {line_cov.get("total", 0)} | 
                    Covered: {line_cov.get("covered", 0)} | 
                    Uncovered: {line_cov.get("uncovered", 0)}
                </div>
            </div>
            <div class="detail-row">
                <div class="detail-label">Function Coverage Details:</div>
                <div class="detail-value">
                    Total: {func_cov.get("total", 0)} | 
                    Covered: {func_cov.get("covered", 0)} | 
                    Uncovered: {func_cov.get("uncovered", 0)}
                </div>
            </div>
            <div class="detail-row">
                <div class="detail-label">Region Coverage Details:</div>
                <div class="detail-value">
                    Total: {region_cov.get("total", 0)} | 
                    Covered: {region_cov.get("covered", 0)} | 
                    Uncovered: {region_cov.get("uncovered", 0)}
                </div>
            </div>
        </div>
        
        <div class="back-link">
            <a href="index.html">← Back to Summary</a>
        </div>
    </div>
</body>
</html>
"""
        return html

