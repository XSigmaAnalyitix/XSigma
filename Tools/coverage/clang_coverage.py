#!/usr/bin/env python3
"""Clang/LLVM-specific code coverage generation.

Handles coverage generation for Clang compiler using LLVM coverage tools
(llvm-profdata, llvm-cov). Generates both HTML and JSON coverage reports.
"""

import os
import subprocess
import platform
import json
from pathlib import Path
from typing import List, Optional, Dict, Set
import logging

from common import CONFIG, get_platform_config, find_library

logger = logging.getLogger(__name__)

def _generate_json_export(build_dir: Path, coverage_dir: Path, binaries: List[str],
                         profraw_files: List[str]) -> None:
    """Generate JSON coverage export using llvm-cov export with lcov format.

    Note: LLVM 21.1.0 doesn't support JSON format directly, so we use lcov format
    and parse it into JSON.

    Args:
        build_dir: Path to build directory.
        coverage_dir: Path to coverage report directory.
        binaries: List of binary objects to analyze.
        profraw_files: List of profraw files to use.
    """
    try:
        # Use llvm-cov export with lcov format (supported in LLVM 21.1.0)
        lcov_file = coverage_dir / "coverage.lcov"
        export_cmd = [
            "llvm-cov", "export"
        ] + binaries + [
            f"-instr-profile={coverage_dir / 'all-merged.profdata'}",
            "-format=lcov"
        ]

        # Add ignore patterns from config
        for pattern in CONFIG["llvm_ignore_regex"]:
            export_cmd.insert(-2, f"-ignore-filename-regex={pattern}")

        result = subprocess.run(export_cmd, capture_output=True, text=True, check=True)

        if result.stdout:
            # Save LCOV output to file
            with open(lcov_file, 'w', encoding='utf-8') as f:
                f.write(result.stdout)
            print(f"LCOV file generated: {lcov_file}")
            # Generate summary JSON from lcov data
            _generate_summary_json_from_lcov(lcov_file, coverage_dir)
    except subprocess.CalledProcessError as e:
        print(f"Warning: LCOV export failed: {e}")
        if e.stderr:
            print(f"Error details: {e.stderr}")
    except Exception as e:
        print(f"Warning: JSON generation from LCOV failed: {e}")


def _parse_lcov_for_line_coverage(lcov_file: Path) -> Dict[str, Dict]:
    """Parse LCOV file to extract line-by-line coverage data.

    Args:
        lcov_file: Path to LCOV file.

    Returns:
        Dictionary mapping file paths to coverage data with covered/uncovered lines.
    """
    file_coverage = {}
    current_file = None
    covered_lines = set()
    uncovered_lines = set()
    execution_counts = {}

    try:
        with open(lcov_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()

                if line.startswith("SF:"):
                    # Save previous file data
                    if current_file:
                        file_coverage[current_file] = {
                            "covered": covered_lines,
                            "uncovered": uncovered_lines,
                            "execution_counts": execution_counts
                        }
                    # Start new file
                    current_file = line[3:]
                    covered_lines = set()
                    uncovered_lines = set()
                    execution_counts = {}

                elif line.startswith("DA:") and current_file:
                    # Line data: DA:line_number,hit_count
                    parts = line[3:].split(',')
                    if len(parts) == 2:
                        line_num = int(parts[0])
                        hit_count = int(parts[1])
                        execution_counts[line_num] = hit_count
                        if hit_count > 0:
                            covered_lines.add(line_num)
                        else:
                            uncovered_lines.add(line_num)

                elif line == "end_of_record" and current_file:
                    # End of file record
                    file_coverage[current_file] = {
                        "covered": covered_lines,
                        "uncovered": uncovered_lines,
                        "execution_counts": execution_counts
                    }
                    current_file = None
                    covered_lines = set()
                    uncovered_lines = set()
                    execution_counts = {}

    except Exception as e:
        print(f"Warning: Failed to parse LCOV file for line coverage: {e}")

    return file_coverage


def _generate_summary_json_from_lcov(lcov_file: Path, coverage_dir: Path) -> None:
    """Generate summary JSON from LCOV coverage data.

    Args:
        lcov_file: Path to LCOV file generated by llvm-cov show.
        coverage_dir: Path to coverage report directory.
    """
    try:
        summary = {
            "metadata": {
                "format_version": "2.0",
                "generator": "xsigma_coverage_tool",
                "schema": "cobertura-compatible"
            },
            "summary": {
                "line_coverage": {
                    "total": 0,
                    "covered": 0,
                    "uncovered": 0,
                    "percent": 0.0
                },
                "function_coverage": {
                    "total": 0,
                    "covered": 0,
                    "uncovered": 0,
                    "percent": 0.0
                },
                "region_coverage": {
                    "total": 0,
                    "covered": 0,
                    "uncovered": 0,
                    "percent": 0.0
                }
            },
            "files": []
        }

        # Parse LCOV file
        current_file = None
        file_data = {}

        with open(lcov_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()

                if line.startswith("SF:"):
                    # Source file
                    current_file = line[3:]
                    file_data[current_file] = {
                        "line_coverage": {"total": 0, "covered": 0, "uncovered": 0},
                        "function_coverage": {"total": 0, "covered": 0, "uncovered": 0}
                    }

                elif line.startswith("FNF:") and current_file:
                    # Function count
                    file_data[current_file]["function_coverage"]["total"] = int(line[4:])

                elif line.startswith("FNH:") and current_file:
                    # Function hit count
                    file_data[current_file]["function_coverage"]["covered"] = int(line[4:])

                elif line.startswith("LF:") and current_file:
                    # Line count
                    file_data[current_file]["line_coverage"]["total"] = int(line[3:])

                elif line.startswith("LH:") and current_file:
                    # Line hit count
                    file_data[current_file]["line_coverage"]["covered"] = int(line[3:])

        # Build summary from file data
        for filename, data in file_data.items():
            file_summary = {"file": filename}

            # Line coverage
            line_cov = data["line_coverage"]
            line_cov["uncovered"] = line_cov["total"] - line_cov["covered"]
            line_cov["percent"] = round(
                (line_cov["covered"] / line_cov["total"] * 100) if line_cov["total"] > 0 else 0.0,
                2
            )
            file_summary["line_coverage"] = line_cov

            # Function coverage
            func_cov = data["function_coverage"]
            func_cov["uncovered"] = func_cov["total"] - func_cov["covered"]
            func_cov["percent"] = round(
                (func_cov["covered"] / func_cov["total"] * 100) if func_cov["total"] > 0 else 0.0,
                2
            )
            file_summary["function_coverage"] = func_cov

            summary["files"].append(file_summary)

            # Accumulate summary
            summary["summary"]["line_coverage"]["total"] += line_cov["total"]
            summary["summary"]["line_coverage"]["covered"] += line_cov["covered"]
            summary["summary"]["line_coverage"]["uncovered"] += line_cov["uncovered"]

            summary["summary"]["function_coverage"]["total"] += func_cov["total"]
            summary["summary"]["function_coverage"]["covered"] += func_cov["covered"]
            summary["summary"]["function_coverage"]["uncovered"] += func_cov["uncovered"]

        # Calculate summary percentages
        if summary["summary"]["line_coverage"]["total"] > 0:
            line_percent = (summary["summary"]["line_coverage"]["covered"] /
                           summary["summary"]["line_coverage"]["total"]) * 100
            summary["summary"]["line_coverage"]["percent"] = round(line_percent, 2)

        if summary["summary"]["function_coverage"]["total"] > 0:
            func_percent = (summary["summary"]["function_coverage"]["covered"] /
                           summary["summary"]["function_coverage"]["total"]) * 100
            summary["summary"]["function_coverage"]["percent"] = round(func_percent, 2)

        # Save summary JSON
        summary_file = coverage_dir / "coverage_summary.json"
        with open(summary_file, 'w', encoding='utf-8') as f:
            json.dump(summary, f, indent=2)
        print(f"Coverage summary JSON saved to: {summary_file}")

        # Generate custom HTML from line-by-line coverage data
        try:
            from html_report import HtmlGenerator
            line_coverage_data = _parse_lcov_for_line_coverage(lcov_file)

            # Prepare data for HtmlGenerator
            covered_lines = {}
            uncovered_lines = {}
            execution_counts = {}

            for file_path, cov_data in line_coverage_data.items():
                covered_lines[file_path] = cov_data["covered"]
                uncovered_lines[file_path] = cov_data["uncovered"]
                execution_counts[file_path] = cov_data["execution_counts"]

            # Generate custom HTML reports
            html_dir = coverage_dir / "html"
            html_dir.mkdir(exist_ok=True)
            generator = HtmlGenerator(html_dir)
            generator.generate_report(covered_lines, uncovered_lines, execution_counts)
            print(f"Custom HTML report generated at: {html_dir}")
        except Exception as e:
            print(f"Warning: Failed to generate custom HTML from LCOV: {e}")

        # Also generate JSON-based HTML for reference
        try:
            from html_report import JsonHtmlGenerator
            json_html_dir = coverage_dir / "html_from_json"
            generator = JsonHtmlGenerator(json_html_dir)
            index_file = generator.generate_from_dict(summary)
            print(f"JSON-based HTML report generated at: {index_file}")
        except Exception as e:
            print(f"Warning: Failed to generate JSON-based HTML: {e}")

    except Exception as e:
        print(f"Warning: Failed to generate summary JSON from LCOV: {e}")


def prepare_llvm_coverage(build_dir: Path, module_name: str, binaries_list: str, profraw_list: str) -> List[Path]:
    """Discover and run all test executables for a specific module.

    Searches for test executables containing the module name in their filename
    using flexible pattern matching.

    Args:
        build_dir: Path to build directory.
        module_name: Name of the module to find tests for.

    Returns:
        List of Path objects pointing to test executables for the module.
    """
    config = get_platform_config()
    exe_extension = config["exe_extension"]
    bin_folder = config["lib_folder"]
    dll_extension = config["dll_extension"]
    coverage_dir = build_dir / "coverage_report"
    coverage_dir.mkdir(exist_ok=True)

    dll_path = find_library(build_dir, bin_folder, module_name, dll_extension)
    test_dir = build_dir / "Library" / module_name / "Testing" / "Cxx"
    test_executable = build_dir / "bin" / f"{module_name}CxxTests{exe_extension}"
    profraw_file = build_dir / "coverage_report" / f"{module_name}CxxTests.profraw"
    
    if not test_executable.exists():
        print(f"Warning: Test executable not found for {module_name}, skipping")
        return False
    
    with open(binaries_list, 'a') as f:
        print(f"Adding {dll_path} to binaries list")    
        f.write(f"-object={dll_path}\n")
    
    env = os.environ.copy()
    env['LLVM_PROFILE_FILE'] = str(profraw_file)
    try:
        subprocess.run([str(test_executable)], env=env, check=False, cwd=str(test_dir), capture_output=True, text=True)
    except subprocess.CalledProcessError as e:
        print(f"Warning: Test execution failed for {module_name}: {e}")
        return False
    except FileNotFoundError as e:
        print(f"Warning: Could not execute {module_name}CxxTests: {e}")
        return False
    
    with open(binaries_list, 'a') as f:
        print(f"Adding {test_executable} to binaries list")
        f.write(f"-object={test_executable}\n")
    with open(profraw_list, 'a') as f:
        print(f"Adding {profraw_file} to profraw list")
        f.write(f"{profraw_file}\n")
    
    return True

def generate_llvm_coverage(build_dir: Path, modules: List[str],
                          source_folder: Path,
                          llvm_ignore_regex: List[str] = None) -> None:
    """Generate code coverage using LLVM (for Clang).

    Args:
        build_dir: Path to build directory.
        modules: List of module names to analyze.
        source_folder: Path to source folder containing modules.
        llvm_ignore_regex: List of regex patterns to ignore. If None, uses CONFIG.
    """
    if llvm_ignore_regex is None:
        llvm_ignore_regex = CONFIG["llvm_ignore_regex"]

    build_dir = Path(build_dir)
    coverage_dir = build_dir / "coverage_report"
    coverage_dir.mkdir(exist_ok=True)
    
    binaries_list = coverage_dir / "binaries.list"
    profraw_list = coverage_dir / "profraw.list"
    
    binaries_list.write_text("")
    profraw_list.write_text("")

    # Discover and run test executables
    print("Discovering test executables...")
    all_profraw_files = []
    successful_modules = 0
    for module in modules:
        if prepare_llvm_coverage(build_dir, module, str(binaries_list), str(profraw_list)):
             successful_modules += 1

    if successful_modules == 0:
        print("Error: No modules processed successfully")
        return

    # Find all .profraw files
    print(f"Successfully processed {successful_modules}/{len(modules)} modules")
    
    print("Merging profile data...")
    profraw_files = profraw_list.read_text().strip().split('\n')
    profraw_files = [f for f in profraw_files if f]
    
    if not profraw_files:
        print("Error: No profraw files generated")
        return
    
    merge_cmd = [
        "llvm-profdata", "merge", "-o",
        str(coverage_dir / "all-merged.profdata"), "-sparse"
    ] + profraw_files
    subprocess.run(merge_cmd, check=True)
    
    print("Generating coverage report...")
    binaries = binaries_list.read_text().strip().split('\n')
    binaries = [b for b in binaries if b]

    # Generate JSON export (which includes custom HTML generation)
    print("Generating JSON coverage report...")
    _generate_json_export(build_dir, coverage_dir, binaries, profraw_files)

