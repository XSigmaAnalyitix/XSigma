[[linter]]
code = 'FLAKE8'
include_patterns = ['**/*.py','Scripts/**/*.py']
exclude_patterns = [
    '.git/**',
    'ThirdParty/**',
    'venv/**',
    '**/*.pyi',
    'Tools/**',
    '.vscode/**',
    '.augment/**',
    'Scripts/iwyu/iwyu_configure_detector.py',
]
command = [
    'python3',
    'Tools/linter/adapters/flake8_linter.py',
    '--',
    '@{{PATHSFILE}}'
]
init_command = [
    'python3',
    'Tools/linter/adapters/pip_init.py',
    '--dry-run={{DRYRUN}}',
    'flake8==7.3.0',
    'flake8-bugbear==24.12.12',
    'flake8-comprehensions==3.16.0',
    'flake8-executable==2.1.3',
    'flake8-logging-format==2024.24.12',
    'flake8-pyi==25.5.0',
    'flake8-simplify==0.22.0',
    'mccabe==0.7.0',
    'pycodestyle==2.14.0',
    'pyflakes==3.4.0',
    # Note: torchfix is a PyTorch-compatible linting tool used for XSigma
    'torchfix==0.4.0 ; python_version >= "3.10" and python_version < "3.13"',
]


[[linter]]
code = 'CLANGFORMAT'
include_patterns = [
    '**/*.h',
    '**/*.cxx',
]
exclude_patterns = [
    'ThirdParty/**',
    '.lintrunner.toml',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
init_command = [
    'python3',
    'Tools/linter/adapters/s3_init.py',
    '--config-json=Tools/linter/adapters/s3_init_config.json',
    '--linter=clang-format',
    '--dry-run={{DRYRUN}}',
    '--output-dir=.lintbin',
    '--output-name=clang-format',
]
command = [
    'python3',
    'Tools/linter/adapters/clangformat_linter.py',
    '--binary=.lintbin/clang-format',
    '--',
    '@{{PATHSFILE}}'
]
is_formatter = true

[[linter]]
code = 'MYPY'
include_patterns = [
    '**/*.py',
    '**/*.pyi',
]
exclude_patterns = [
    'ThirdParty/**',
    'Tools/**',
    'venv/**',
    'build/**',
    'build_*/**',
    'dist/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
    'mypy_plugins/sympy_mypy_plugin.py',
    'Scripts/setup.py',
    'Scripts/iwyu/run_iwyu_analysis.py',
]
command = [
    'python3',
    'Tools/linter/adapters/mypy_linter.py',
    '--config=mypy.ini',
    '--',
    '@{{PATHSFILE}}'
]
init_command = [
    'python3',
    'Tools/linter/adapters/pip_init.py',
    '--dry-run={{DRYRUN}}',
    'numpy==1.26.4 ; python_version >= "3.10" and python_version <= "3.11"',
    'numpy==2.1.0 ; python_version >= "3.12"',
    'expecttest==0.3.0',
    'mypy==1.16.0',
    'sympy==1.13.3',
    'types-requests==2.27.25',
    'types-pyyaml==6.0.2',
    'types-tabulate==0.8.8',
    'types-protobuf==5.29.1.20250403',
    'types-setuptools==79.0.0.20250422',
    'types-jinja2==2.11.9',
    'types-colorama==0.4.6',
    'filelock==3.18.0',
    'junitparser==2.1.1',
    'rich==14.1.0',
    'pyyaml==6.0.2',
    'optree==0.13.0',
    'dataclasses-json==0.6.7',
    'pandas==2.2.3',
]

[[linter]]
code = 'MYPYSTRICT'
include_patterns = [
    '**/*.py',
]
exclude_patterns = [
    'ThirdParty/**',
    'Tools/**',
    'venv/**',
    'build/**',
    'build_*/**',
    'dist/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
    'mypy_plugins/sympy_mypy_plugin.py',
    'Scripts/setup.py',
    'Scripts/iwyu/run_iwyu_analysis.py',
]
command = [
    'python3',
    'Tools/linter/adapters/mypy_linter.py',
    '--config=mypy-strict.ini',
    '--code=MYPYSTRICT',
    '--',
    '@{{PATHSFILE}}'
]


[[linter]]
code = 'PYREFLY'
include_patterns = [
    '**/*.py',
    '**/*.pyi',
]
exclude_patterns = [
    'ThirdParty/**',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
command = [
    'python3',
    'Tools/linter/adapters/pyrefly_linter.py',
    '--config=pyrefly.toml',
]
init_command = [
    'python3',
    'Tools/linter/adapters/pip_init.py',
    '--dry-run={{DRYRUN}}',
    'numpy==2.1.0 ; python_version >= "3.12"',
    'expecttest==0.3.0',
    'pyrefly==0.36.2',
    'sympy==1.13.3',
    'types-requests==2.27.25',
    'types-pyyaml==6.0.2',
    'types-tabulate==0.8.8',
    'types-protobuf==5.29.1.20250403',
    'types-setuptools==79.0.0.20250422',
    'types-jinja2==2.11.9',
    'types-colorama==0.4.6',
    'filelock==3.18.0',
    'junitparser==2.1.1',
    'rich==14.1.0',
    'optree==0.17.0',
    'types-openpyxl==3.1.5.20250919',
    'types-python-dateutil==2.9.0.20251008'
]

[[linter]]
code = 'CLANGTIDY'
include_patterns = [
    'Library/**/*.h',
    'Library/**/*.hxx',
    'Library/**/*.cxx',
]
exclude_patterns = [
    'ThirdParty/**',
    '**/generated/**',
    '**/*pb.h',
    '**/*inl.h',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
init_command = [
    'python3',
    'Tools/linter/adapters/s3_init.py',
    '--config-json=Tools/linter/adapters/s3_init_config.json',
    '--linter=clang-tidy',
    '--dry-run={{DRYRUN}}',
    '--output-dir=.lintbin',
    '--output-name=clang-tidy',
]
command = [
    'python3',
    'Tools/linter/adapters/clangtidy_linter.py',
    '--binary=.lintbin/clang-tidy',
    '--build_dir=./build',
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
code = 'TYPEIGNORE'
include_patterns = ['**/*.py', '**/*.pyi']
exclude_patterns = [
    'ThirdParty/**',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
command = [
    'python3',
    'Tools/linter/adapters/grep_linter.py',
    '--pattern=# type:\s*ignore([^\[]|$)',
    '--linter-name=TYPEIGNORE',
    '--error-name=unqualified type: ignore',
    """--error-description=\
        This line has an unqualified `type: ignore`; \
        please convert it to `type: ignore[xxxx]`\
    """,
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
code = 'TYPENOSKIP'
include_patterns = ['mypy.ini']
command = [
    'python3',
    'Tools/linter/adapters/grep_linter.py',
    '--pattern=follow_imports\s*=\s*skip',
    '--linter-name=TYPENOSKIP',
    '--error-name=use of follow_imports = skip',
    """--error-description=\
        follow_imports = skip is forbidden from mypy.ini configuration as it \
        is extremely easy to accidentally turn off type checking unintentionally.  If \
        you need to suppress type errors, use a top level # mypy: ignore-errors.  \
        Do not rely on automatic Any substitution; instead, manually # type: ignore \
        at use sites or define a pyi type stub with more relaxed types. \
    """,
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
code = 'NOQA'
include_patterns = ['**/*.py', '**/*.pyi']
exclude_patterns = [
    'ThirdParty/**',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
command = [
    'python3',
    'Tools/linter/adapters/grep_linter.py',
    '--pattern=# noqa([^:]|$)',
    '--linter-name=NOQA',
    '--error-name=unqualified noqa',
    """--error-description=\
        This line has an unqualified `noqa`; \
        please convert it to `noqa: XXXX`\
    """,
    '--',
    '@{{PATHSFILE}}'
]

# [[linter]]
# code = 'NATIVEFUNCTIONS'
# include_patterns=['aten/src/ATen/native/native_functions.yaml']
# command = [
#     'python3',
#     'Tools/linter/adapters/nativefunctions_linter.py',
#     '--native-functions-yml=aten/src/ATen/native/native_functions.yaml',
# ]
# init_command = [
#     'python3',
#     'Tools/linter/adapters/pip_init.py',
#     '--dry-run={{DRYRUN}}',
#     'ruamel.yaml==0.18.10',
# ]
# is_formatter = true

[[linter]]
code = 'GHA'
include_patterns=['.github/workflows/**/*.yml']
command = [
    'python3',
    'Tools/linter/adapters/gha_linter.py',
    '--',
    '@{{PATHSFILE}}'
]
init_command = [
    'python3',
    'Tools/linter/adapters/pip_init.py',
    '--dry-run={{DRYRUN}}',
    'ruamel.yaml==0.18.10',
]

[[linter]]
code = 'NEWLINE'
include_patterns=['**']
exclude_patterns=[
    'ThirdParty/**',
    '**/*.bat',
    '**/*.expect',
    '**/*.ipynb',
    '**/*.ps1',
    '**/*.png',
    '**/*.gz',
    '**/*.patch',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
    'Scripts/valgrind_ctest.sh',
]
command = [
    'python3',
    'Tools/linter/adapters/newlines_linter.py',
    '--',
    '@{{PATHSFILE}}',
]
is_formatter = true

[[linter]]
code = 'SPACES'
include_patterns = ['**']
exclude_patterns = [
    'ThirdParty/**',
    '**/*.diff',
    '**/*.patch',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
command = [
    'python3',
    'Tools/linter/adapters/grep_linter.py',
    '--pattern=[[:blank:]]$',
    '--linter-name=SPACES',
    '--error-name=trailing spaces',
    '--replace-pattern=s/[[:blank:]]+$//',
    """--error-description=\
        This line has trailing spaces; please remove them.\
    """,
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
code = 'TABS'
include_patterns = ['**']
exclude_patterns = [
    'ThirdParty/**',
    '**/*.svg',
    '**/*Makefile',
    '**/.gitattributes',
    '**/.gitmodules',
    '.lintrunner.toml',
    '**/*.patch',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
command = [
    'python3',
    'Tools/linter/adapters/grep_linter.py',
    # @lint-ignore TXT2
    '--pattern=	',
    '--linter-name=TABS',
    '--error-name=saw some tabs',
    '--replace-pattern=s/\t/    /',
    """--error-description=\
        This line has tabs; please replace them with spaces.\
    """,
    '--',
    '@{{PATHSFILE}}'
]

# [[linter]]
# code = 'XSIGMA_UNUSED'
# include_patterns = [
#     '**/*.hxx',
#     '**/*.cxx',
#     '**/*.h',
# ]
# exclude_patterns = [
#     'ThirdParty/**',
#     'Tools/**',
#     'Scripts/**',
#     '.vscode/**',
#     '.git/**',
#     '.augment/**',
# ]
# command = [
#     'python3',
#     'Tools/linter/adapters/grep_linter.py',
#     '--pattern=XSIGMA_UNUSED',
#     '--linter-name=XSIGMA_UNUSED',
#     '--error-name=deprecated XSIGMA_UNUSED macro',
#     '--replace-pattern=s/XSIGMA_UNUSED/[[maybe_unused]]/',
#     """--error-description=\
#         Deprecated macro, use [[maybe_unused]] directly\
#     """,
#     '--',
#     '@{{PATHSFILE}}'
# ]

# [[linter]]
# code = 'XSIGMA_NODISCARD'
# include_patterns = [
#     '**/*.hxx',
#     '**/*.cxx',
#     '**/*.h',
# ]
# exclude_patterns = [
#     'ThirdParty/**',
#     'Tools/**',
#     'Scripts/**',
#     '.vscode/**',
#     '.git/**',
#     '.augment/**',
# ]
# command = [
#     'python3',
#     'Tools/linter/adapters/grep_linter.py',
#     '--pattern=XSIGMA_NODISCARD',
#     '--linter-name=XSIGMA_NODISCARD',
#     '--error-name=deprecated XSIGMA_NODISCARD macro',
#     '--replace-pattern=s/XSIGMA_NODISCARD/[[nodiscard]]/',
#     """--error-description=\
#         Deprecated macro, use [[nodiscard]] directly\
#     """,
#     '--',
#     '@{{PATHSFILE}}'
# ]

# [[linter]]
# code = 'INCLUDE'
# include_patterns = [
#     'Library/**',
#     'Tests/**',
# ]
# exclude_patterns = [
#     'ThirdParty/**',
#     '**/generated/**',
#     'Tools/**',
#     '.vscode/**',
#     '.git/**',
#     '.augment/**',
# ]
# command = [
#     'python3',
#     'Tools/linter/adapters/grep_linter.py',
#     '--pattern=#include "',
#     '--linter-name=INCLUDE',
#     '--error-name=quoted include',
#     '--replace-pattern=s/#include "(.*)"$/#include <\1>/',
#     """--error-description=\
#         This #include uses quotes; please convert it to #include <xxxx>\
#     """,
#     '--',
#     '@{{PATHSFILE}}'
# ]

[[linter]]
code = 'PYBIND11_INCLUDE'
include_patterns = [
    '**/*.hxx',
    '**/*.cxx',
    '**/*.h',
]
exclude_patterns = [
    'ThirdParty/**',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
command = [
    'python3',
    'Tools/linter/adapters/grep_linter.py',
    '--pattern=#include <pybind11\/(^|[^(gil_simple\.h)])',
    '--allowlist-pattern=#include <xsigma\/csrc\/utils\/pybind.h>',
    '--linter-name=PYBIND11_INCLUDE',
    '--match-first-only',
    '--error-name=direct include of pybind11',
    # https://stackoverflow.com/a/33416489/23845
    # NB: this won't work if the pybind11 include is on the first line;
    # but that's fine because it will just mean the lint will still fail
    # after applying the change and you will have to fix it manually
    '--replace-pattern=1,/(#include <pybind11\/)/ s/(#include <pybind11\/)/#include <xsigma\/csrc\/utils\/pybind.h>\n\1/',
    """--error-description=\
        This #include directly includes pybind11 without also including \
        #include <xsigma/csrc/utils/pybind.h>;  this means some important \
        specializations may not be included.\
    """,
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
code = 'ERROR_PRONE_ISINSTANCE'
include_patterns = [
    '**/*.py',
]
exclude_patterns = [
    'ThirdParty/**',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
command = [
    'python3',
    'Tools/linter/adapters/grep_linter.py',
    '--pattern=isinstance\([^)]+(int|float)\)',
    '--linter-name=ERROR_PRONE_ISINSTANCE',
    '--error-name=error prone isinstance',
    """--error-description=\
        This line has an isinstance call that directly refers to \
        int or float.  This is error-prone because you may also \
        have wanted to allow SymInt or SymFloat in your test.  \
        To suppress this lint, use an appropriate type alias defined \
        in xsigma._prims_common; use IntLike/FloatLike when you would accept \
        both regular and symbolic numbers, Dim for ints representing \
        dimensions, or IntWithoutSymInt/FloatWithoutSymFloat if you really \
        meant to exclude symbolic numbers.
    """,
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
code = 'PYBIND11_SPECIALIZATION'
include_patterns = [
    '**/*.hxx',
    '**/*.cxx',
    '**/*.h',
]
exclude_patterns = [
    'ThirdParty/**',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
command = [
    'python3',
    'Tools/linter/adapters/grep_linter.py',
    '--pattern=PYBIND11_DECLARE_HOLDER_TYPE',
    '--linter-name=PYBIND11_SPECIALIZATION',
    '--error-name=pybind11 specialization in non-standard location',
    """--error-description=\
        This pybind11 specialization (PYBIND11_DECLARE_HOLDER_TYPE) should \
        be placed in xsigma/csrc/utils/pybind.h so that it is guaranteed to be \
        included at any site that may potentially make use of it via py::cast. \
        If your specialization is in the same header file as the definition \
        of the holder type, you can ignore this lint by adding your header to \
        the exclude_patterns for this lint in .lintrunner.toml.  For more \
        information see https://github.com/pybind/pybind11/issues/4099 \
    """,
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
code = 'PYPIDEP'
include_patterns = ['.github/**']
exclude_patterns = [
    '**/*.rst',
    '**/*.py',
    '**/*.md',
    '**/*.diff',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
command = [
    'python3',
    'Tools/linter/adapters/grep_linter.py',
    """--pattern=\
    (pip|pip3|python -m pip|python3 -m pip|python3 -mpip|python -mpip) \
    install ([a-zA-Z0-9][A-Za-z0-9\\._\\-]+)([^/=<>~!]+)[A-Za-z0-9\\._\\-\\*\\+\\!]*$\
    """,
    '--linter-name=PYPIDEP',
    '--error-name=unpinned PyPI install',
    """--error-description=\
        This line has unpinned PyPi installs; \
        please pin them to a specific version: e.g. 'thepackage==1.2'\
    """,
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
code = 'EXEC'
include_patterns = ['**']
exclude_patterns = [
    'ThirdParty/**',
    '**/*.so',
    '**/*.py',
    '**/*.sh',
    '**/*.bash',
    '**/git-pre-commit',
    '**/git-clang-format',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
command = [
    'python3',
    'Tools/linter/adapters/exec_linter.py',
    '--',
    '@{{PATHSFILE}}',
]

[[linter]]
code = 'CUBINCLUDE'
include_patterns = [
    'Library/**',
    'Tools/**',
    'Tests/**',
]
exclude_patterns = [
    'ThirdParty/**',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
command = [
    'python3',
    'Tools/linter/adapters/grep_linter.py',
    '--pattern=#include <cub/',
    '--linter-name=CUBINCLUDE',
    '--error-name=direct cub include',
    """--error-description=\
        This line has a direct cub include; please include \
        ATen/cuda/cub.cuh instead and wrap your cub calls in \
        at::native namespace if necessary.
    """,
    '--',
    '@{{PATHSFILE}}'
]

#[[linter]]
#code = 'RAWCUDA'
#include_patterns = [
#    'Library/**',
#    'Tests/**',
#]
#exclude_patterns = [
#    'ThirdParty/**',
#    'Tools/**',
#    '.vscode/**',
#    '.augment/**',
#    '.git/**',
#]
#command = [
#    'python3',
#    'Tools/linter/adapters/grep_linter.py',
#    '--pattern=cudaStreamSynchronize',
#    '--linter-name=RAWCUDA',
#    '--error-name=raw CUDA API usage',
#    """--error-description=\
#        This line calls raw CUDA APIs directly; please use at::cuda wrappers instead.
#    """,
#    '--',
#    '@{{PATHSFILE}}'
#]

[[linter]]
code = 'ROOT_LOGGING'
include_patterns = [
    '**/*.py',
]
exclude_patterns = [
    'ThirdParty/**',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
command = [
    'python3',
    'Tools/linter/adapters/grep_linter.py',
    '--pattern=logging\.(debug|info|warn|warning|error|critical|log|exception)\(',
    '--replace-pattern=s/logging\.(debug|info|warn|warning|error|critical|log|exception)\(/log.\1(/',
    '--linter-name=ROOT_LOGGING',
    '--error-name=use of root logger',
    """--error-description=\
        Do not use root logger (logging.info, etc) directly; instead \
        define 'log = logging.getLogger(__name__)' and call, e.g., log.info().
    """,
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
code = 'DEPLOY_DETECTION'
include_patterns = [
    '**/*.py',
]
command = [
    'python3',
    'Tools/linter/adapters/grep_linter.py',
    '--pattern=sys\.executable == .torch_deploy.',
    '--replace-pattern=s/sys\.executable == .torch_deploy./xsigma._running_with_deploy\(\)/',
    '--linter-name=DEPLOY_DETECTION',
    '--error-name=properly detect deploy runner',
    """--error-description=\
        Do not use sys.executable to detect if running within deploy/multipy, use xsigma._running_with_deploy().
    """,
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
code = 'CMAKE'
include_patterns = [
    "**/*.cmake",
    "**/*.cmake.in",
    "**/CMakeLists.txt",
]
exclude_patterns = [
    'ThirdParty/**',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
command = [
    'python3',
    'Tools/linter/adapters/cmake_linter.py',
    '--config=.cmakelintrc',
    '--',
    '@{{PATHSFILE}}',
]
init_command = [
    'python3',
    'Tools/linter/adapters/pip_init.py',
    '--dry-run={{DRYRUN}}',
    'cmakelint==1.4.1',
]

[[linter]]
code = 'CMAKEFORMAT'
include_patterns = [
    "**/*.cmake",
    "**/*.cmake.in",
    "**/CMakeLists.txt",
]
exclude_patterns = [
    'ThirdParty/**',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
command = [
    'python3',
    'Tools/linter/adapters/cmake_format_linter.py',
    '--config=.cmake-format.yaml',
    '--',
    '@{{PATHSFILE}}',
]
init_command = [
    'python3',
    'Tools/linter/adapters/pip_init.py',
    '--dry-run={{DRYRUN}}',
    'cmakelang==0.6.13',
]
is_formatter = true

[[linter]]
code = 'SHELLCHECK'
include_patterns = [
    'Scripts/**/*.sh',
    'Tools/**/*.sh',
]
exclude_patterns = [
    'ThirdParty/**',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
    'Scripts/valgrind_ctest.sh',
    'Scripts/all-cmake-format.sh',
]
command = [
    'python3',
    'Tools/linter/adapters/shellcheck_linter.py',
    '--',
    '@{{PATHSFILE}}',
]
init_command = [
    'python3',
    'Tools/linter/adapters/pip_init.py',
    '--dry-run={{DRYRUN}}',
    'shellcheck-py==0.7.2.1',
]

[[linter]]
code = 'ACTIONLINT'
include_patterns = [
    '.github/workflows/*.yml',
    '.github/workflows/*.yaml',
]
exclude_patterns = [
    'ThirdParty/**',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
command = [
    'python3',
    'Tools/linter/adapters/actionlint_linter.py',
    '--binary=.lintbin/actionlint',
    '--',
    '@{{PATHSFILE}}',
]
init_command = [
    'python3',
    'Tools/linter/adapters/s3_init.py',
    '--config-json=Tools/linter/adapters/s3_init_config.json',
    '--linter=actionlint',
    '--dry-run={{DRYRUN}}',
    '--output-dir=.lintbin',
    '--output-name=actionlint',
]

[[linter]]
code = 'TESTOWNERS'
include_patterns = [
    'test/**/test_*.py',
    'test/**/*_test.py',
]
exclude_patterns = [
    'test/run_test.py',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
command = [
    'python3',
    'Tools/linter/adapters/testowners_linter.py',
    '--',
    '@{{PATHSFILE}}',
]

[[linter]]
code = 'TEST_HAS_MAIN'
include_patterns = [
    'test/**/test_*.py',
]
exclude_patterns = [
    'ThirdParty/**',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
command = [
    'python3',
    'Tools/linter/adapters/test_has_main_linter.py',
    '--',
    '@{{PATHSFILE}}',
]

#[[linter]]
#code = 'CALL_ONCE'
#include_patterns = [
#    'Library/**',
#]
#exclude_patterns = [
#    'Tools/**',
#    '.vscode/**',
#    '.augment/**',
#    '.git/**',
#]
#command = [
#    'python3',
#    'Tools/linter/adapters/grep_linter.py',
#    '--pattern=std::call_once',
#    '--linter-name=CALL_ONCE',
#    '--error-name=invalid call_once',
#    '--replace-pattern=s/std::call_once/xsigma::call_once/',
#    """--error-description=\
#        Use of std::call_once is forbidden and should be replaced with xsigma::call_once\
#    """,
#    '--',
#    '@{{PATHSFILE}}'
#]

[[linter]]
code = 'CONTEXT_DECORATOR'
include_patterns = [
    'Library/**',
]
command = [
    'python3',
    'Tools/linter/adapters/grep_linter.py',
    '--pattern=@.*(dynamo_timed|preserve_rng_state|clear_frame|with_fresh_cache_if_config|use_lazy_graph_module|_disable_current_modes)',
    '--linter-name=CONTEXT_DECORATOR',
    '--error-name=avoid context decorator',
    """--error-description=\
        Do not use context manager as decorator as it breaks cProfile traces.  Use it as \
        a context manager instead\
    """,
    '--',
    '@{{PATHSFILE}}'
]

#[[linter]]
#code = 'ONCE_FLAG'
#include_patterns = [
#    'Library/**',
#]
#exclude_patterns = [
#    'ThirdParty/**',
#    'Tools/**',
#    '.vscode/**',
#    '.git/**',
#    '.augment/**',
#]
#command = [
#    'python3',
#    'Tools/linter/adapters/grep_linter.py',
#    '--pattern=std::once_flag',
#    '--linter-name=ONCE_FLAG',
#    '--error-name=invalid once_flag',
#    '--replace-pattern=s/std::once_flag/std::once_flag/',
#    """--error-description=\
#        Use of std::once_flag is forbidden and should be replaced with std::once_flag\
#    """,
#    '--',
#    '@{{PATHSFILE}}'
#]

[[linter]]
code = 'WORKFLOWSYNC'
include_patterns = [
    '.github/workflows/pull.yml',
    '.github/workflows/trunk.yml',
    '.github/workflows/periodic.yml',
    '.github/workflows/mac-mps.yml',
    '.github/workflows/slow.yml',
]
command = [
    'python3',
    'Tools/linter/adapters/workflow_consistency_linter.py',
    '--',
    '@{{PATHSFILE}}'
]
init_command = [
    'python3',
    'Tools/linter/adapters/pip_init.py',
    '--dry-run={{DRYRUN}}',
    'pyyaml==6.0.2',
]

[[linter]]
code = 'NO_WORKFLOWS_ON_FORK'
include_patterns = [
    '.github/**/*.yml',
    '.github/**/*.yaml',
]
exclude_patterns = [
    'ThirdParty/**',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
command = [
    'python3',
    'Tools/linter/adapters/no_workflows_on_fork.py',
    '--',
    '@{{PATHSFILE}}',
]
init_command = [
    'python3',
    'Tools/linter/adapters/pip_init.py',
    '--dry-run={{DRYRUN}}',
    'pyyaml==6.0.2',
]

[[linter]]
code = 'CODESPELL'
command = [
    'python3',
    'Tools/linter/adapters/codespell_linter.py',
    '--',
    '@{{PATHSFILE}}'
]
include_patterns = [
    '**',
]
exclude_patterns = [
    '.lintrunner.toml',
    'ThirdParty/**',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    'Docs/git/**',
    '.augment/**',
    'Scripts/iwyu/iwyu_configure_detector.py',
]
init_command = [
    'python3',
    'Tools/linter/adapters/pip_init.py',
    '--dry-run={{DRYRUN}}',
    'codespell[toml]==2.4.1',
]
is_formatter = true

# usort + ruff-format
[[linter]]
code = 'PYFMT'
include_patterns = [
    '**/*.py',
    '**/*.pyi',
]
command = [
    'python3',
    'Tools/linter/adapters/pyfmt_linter.py',
    '--',
    '@{{PATHSFILE}}'
]
exclude_patterns = [
    'ThirdParty/**',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
init_command = [
    'python3',
    'Tools/linter/adapters/pip_init.py',
    '--dry-run={{DRYRUN}}',
    'usort==1.0.8.post1',
    'isort==6.0.1',
    'ruff==0.13.1',  # sync with RUFF
]
is_formatter = true

[[linter]]
code = 'PYPROJECT'
command = [
    'python3',
    'Tools/linter/adapters/pyproject_linter.py',
    '--',
    '@{{PATHSFILE}}'
]
include_patterns = [
    "**/pyproject.toml",
]
init_command = [
    'python3',
    'Tools/linter/adapters/pip_init.py',
    '--dry-run={{DRYRUN}}',
    'packaging==25.0',
    'tomli==2.2.1 ; python_version < "3.11"',
]

[[linter]]
code = 'CMAKE_MINIMUM_REQUIRED'
command = [
    'python3',
    'Tools/linter/adapters/cmake_minimum_required_linter.py',
    '--',
    '@{{PATHSFILE}}'
]
include_patterns = [
    "**/pyproject.toml",
    "**/CMakeLists.txt",
    "**/CMakeLists.txt.in",
    "**/*.cmake",
    "**/*.cmake.in",
    "**/*requirements*.txt",
    "**/*requirements*.in",
]
init_command = [
    'python3',
    'Tools/linter/adapters/pip_init.py',
    '--dry-run={{DRYRUN}}',
    'packaging==25.0',
    'tomli==2.2.1 ; python_version < "3.11"',
]

[[linter]]
code = 'COPYRIGHT'
include_patterns = ['**']
exclude_patterns = [
    'ThirdParty/**',
    '.lintrunner.toml',
    'Docs/lintrunner_codes.md',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
command = [
    'python3',
    'Tools/linter/adapters/grep_linter.py',
    '--pattern=Confidential and proprietary',
    '--linter-name=COPYRIGHT',
    '--error-name=Confidential Code',
    """--error-description=\
        Proprietary and confidential source code\
        should not be contributed to XSigma codebase\
    """,
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
code = 'BAZEL_LINTER'
include_patterns = ['WORKSPACE']
command = [
    'python3',
    'Tools/linter/adapters/bazel_linter.py',
    '--binary=.lintbin/bazel',
    '--',
    '@{{PATHSFILE}}'
]
init_command = [
    'python3',
    'Tools/linter/adapters/s3_init.py',
    '--config-json=Tools/linter/adapters/s3_init_config.json',
    '--linter=bazel',
    '--dry-run={{DRYRUN}}',
    '--output-dir=.lintbin',
    '--output-name=bazel',
]
is_formatter = true

[[linter]]
code = 'LINTRUNNER_VERSION'
include_patterns = ['**']
exclude_patterns = [
    'ThirdParty/**',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
command = [
    'python3',
    'Tools/linter/adapters/lintrunner_version_linter.py'
]

[[linter]]
code = 'RUFF'
include_patterns = [
    '**/*.py',
    '**/*.pyi',
    '**/*.ipynb',
    'pyproject.toml',
]
exclude_patterns = [
    'ThirdParty/**',
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
command = [
    'python3',
    'Tools/linter/adapters/ruff_linter.py',
    '--config=pyproject.toml',
    '--show-disable',
    '--',
    '@{{PATHSFILE}}'
]
init_command = [
    'python3',
    'Tools/linter/adapters/pip_init.py',
    '--dry-run={{DRYRUN}}',
    'ruff==0.13.1',  # sync with PYFMT
]
is_formatter = true

[[linter]]
code = 'META_NO_CREATE_UNBACKED'
include_patterns = [
  "Scripts/**/*.py",
  "Tools/**/*.py",
]
command = [
    'python3',
    'Tools/linter/adapters/grep_linter.py',
    '--pattern=create_unbacked',
    '--linter-name=META_NO_CREATE_UNBACKED',
    '--error-name=no create_unbacked in meta registrations',
    """--error-description=\
        Data-dependent operators should have their meta \
        registration in xsigma/_subclasses/fake_impls.py, \
        not xsigma/_meta_registrations.py
    """,
    '--',
    '@{{PATHSFILE}}'
]

[[linter]]
code = 'ATEN_CPU_GPU_AGNOSTIC'
include_patterns = [
    "Library/**/*.hxx",
    "Library/**/*.cxx",
    "Library/**/*.h",
    "Tests/**/*.cpp",
    "Tests/**/*.cxx",
    "Tests/**/*.h",
]
exclude_patterns = [
    "ThirdParty/**",
    'Tools/**',
    '.vscode/**',
    '.git/**',
    '.augment/**',
]
command = [
    'python3',
    'Tools/linter/adapters/grep_linter.py',
    '--pattern=(^#if.*USE_ROCM.*)|(^#if.*USE_CUDA.*)',
    '--linter-name=ATEN_CPU',
    '--error-name=aten-cpu should be gpu agnostic',
    """--error-description=\
        We strongly discourage the compile-time divergence \
        on ATen-CPU code for different GPU code. This \
        disallows sharing the same aten-cpu shared object \
        between different GPU backends \
    """,
    '--',
    '@{{PATHSFILE}}'
]
is_formatter = true

# [[linter]]
# code = 'SET_LINTER'
# command = [
#     'python3',
#     'Tools/linter/adapters/set_linter.py',
#     '--lintrunner',
#     '--',
#     '@{{PATHSFILE}}'
# ]
# include_patterns = [
#     "Scripts/**/*.py",
#     "Tools/**/*.py",
# ]
# is_formatter = true

[[linter]]
code = 'DOCSTRING_LINTER'
command = [
    'python3',
    'Tools/linter/adapters/docstring_linter.py',
    '--lintrunner',
    '--',
    '@{{PATHSFILE}}'
]
include_patterns = [
   'Scripts/**/*.py',
]
exclude_patterns = [
    'Scripts/setup.py',
    'Scripts/iwyu/run_iwyu_analysis.py',
]
is_formatter = false

[[linter]]
code = 'IMPORT_LINTER'
command = [
    'python3',
    'Tools/linter/adapters/import_linter.py',
    '--',
    '@{{PATHSFILE}}'
]
include_patterns = [
   'Scripts/**/*.py',
]
is_formatter = false

[[linter]]
code = 'TEST_DEVICE_BIAS'
command = [
    'python3',
    'Tools/linter/adapters/test_device_bias_linter.py',
    '--',
    '@{{PATHSFILE}}',
]
include_patterns = [
    'Tests/**/test_*.py',
]
